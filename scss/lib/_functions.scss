// calculate a colour to use for contrast based on the brightness of the background
@function get_contrast( $color, $light: white, $dark: black ) {

	@if ( get_brightness( $color ) < 65 ) {

		@return $light;

	} @else {

		@return $dark;

	}

}


// Perceptual colour brightness
// http://www.nbdtech.com/Blog/archive/2008/04/27/Calculating-the-Perceived-Brightness-of-a-Color.aspx
@function get_brightness( $color ) {

	// Default values for relative brightness.
	$red-magic-number: 241;
	$green-magic-number: 691;
	$blue-magic-number: 68;
	$brightness-divisor: $red-magic-number + $green-magic-number + $blue-magic-number;

	// Get colour values.
	$red-component: red( $color );
	$green-component: green( $color );
	$blue-component: blue( $color );

	$sum: ( ( $red-component * $red-component * $red-magic-number ) + ( $green-component * $green-component * $green-magic-number ) + ( $blue-component * $blue-component * $blue-magic-number ) );
	$number: sqrt( math.div( $sum, $brightness-divisor ) );

	@return 100% * math.div( $number, 255 );

}


// Square Root
// http://www.antimath.info/css/sass-sqrt-function/
@function sqrt( $r ) {

	$x0: 1;
	$x1: $x0;

	@for $i from 1 through 10 {
		$x1: $x0 - math.div( $x0 * $x0 - abs( $r ), 2 * $x0 );
		$x0: $x1;
	}

	@return $x1;

}
